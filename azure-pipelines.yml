# Will want to adjust this if we ever start having non-master branches
# in the main repo:
#   https://docs.microsoft.com/en-us/azure/devops/pipelines/build/triggers
trigger:
  - master

jobs:

# Special job that uses a container to check we work on the latest
# tippy-tip ubuntu. The main thing this adds is openssl 1.1.1/TLS 1.3.
#
# Azure has fancy stuff to let you run directly inside a container:
#
#   https://docs.microsoft.com/en-us/azure/devops/pipelines/process/container-phases
#
# Unfortunately it's useless for us. Azure carefully sets everything
# up so that you run as a non-root user, but can sudo to get root. But
# the standard images that docker maintains like 'ubuntu' or 'debian'
# don't have sudo installed, which means that if you use 'container:
# ubuntu:rolling' then you simply cannot get root. And it's definitely
# not worth maintaining our own container image just so we can
# preinstall sudo:
#
#   https://github.com/MicrosoftDocs/vsts-docs/issues/2939
- job: "py37_latest_ubuntu"
  pool:
    vmImage: "ubuntu-16.04"
  timeoutInMinutes: 10
  steps:
    # This actually reveals the CODECOV_TOKEN in the logs, but
    # AFAICT the only thing the token lets you do is upload coverage
    # reports, which doesn't seem like a very tempting target for
    # malicious hackers.
    - bash: |
        set -ex
        env | sort
        sudo docker run -e SYSTEM_JOBIDENTIFIER="$SYSTEM_JOBIDENTIFIER" -e CODECOV_TOKEN="$CODECOV_TOKEN" -v "$PWD:/t" ubuntu:rolling /bin/bash -c "set -ex; cd /t; apt update; apt install -y python3.7-dev python3-virtualenv git build-essential curl; python3.7 -m virtualenv -p python3.7 venv; source venv/bin/activate; source ci/ci.sh"

- job: 'Windows'
  pool:
    vmImage: 'vs2017-win2016'
  timeoutInMinutes: 10
  strategy:
    # Python version list:
    #   64-bit: https://www.nuget.org/packages/python/
    #   32-bit: https://www.nuget.org/packages/pythonx86/
    matrix:
      "Python 3.5, 32 bit":
        python.version: '3.5.4'
        python.pkg: 'pythonx86'
      "Python 3.5, 64 bit":
        python.version: '3.5.4'
        python.pkg: 'python'
      "Python 3.6, 32 bit":
        python.version: '3.6.8'
        python.pkg: 'pythonx86'
      "Python 3.6, 64 bit":
        python.version: '3.6.8'
        python.pkg: 'python'
      "Python 3.7, 32 bit":
        python.version: '3.7.2'
        python.pkg: 'pythonx86'
      "Python 3.7, 64 bit":
        python.version: '3.7.2'
        python.pkg: 'python'

  steps:
  - task: NuGetToolInstaller@0

  - bash: ci/ci.sh
    displayName: "Run the actual tests"

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: 'test-results.xml'
      testRunTitle: 'Windows $(python.pkg) $(python.version)'
    condition: succeededOrFailed()

# Currently broken for unclear reasons probably related to openssl v1.1.1:
#   https://github.com/python-trio/trio/pull/827#issuecomment-457139883
#
# - job: 'Linux'
#   pool:
#     vmImage: 'ubuntu-16.04'
#   timeoutInMinutes: 10
#   strategy:
#     matrix:
#       "Python 3.5":
#         python.version: '3.5'
#       "Python 3.6":
#         python.version: '3.6'
#       "Python 3.7":
#         python.version: '3.7'
#
#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '$(python.version)'
#
#   - bash: ci/ci.sh
#     displayName: "Run the actual tests"
#
#   - task: PublishTestResults@2
#     inputs:
#       testResultsFiles: 'test-results.xml'
#     condition: succeededOrFailed()

- job: 'macOS'
  pool:
    vmImage: 'macOS-10.13'
  timeoutInMinutes: 10
  strategy:
    matrix:
      "Python 3.5":
        python.version: '3.5'
      "Python 3.6":
        python.version: '3.6'
      "Python 3.7":
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - bash: ci/ci.sh
    displayName: "Run the actual tests"

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: 'test-results.xml'
    condition: succeededOrFailed()
