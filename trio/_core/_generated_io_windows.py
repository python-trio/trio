# ***********************************************************
# ******* WARNING: AUTOGENERATED! ALL EDITS WILL BE LOST ******
# *************************************************************
from ._run import GLOBAL_RUN_CONTEXT, _NO_SEND
from ._ki import enable_ki_protection



@enable_ki_protection
async def wait_readable(sock):
    try:
        return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(sock)
    except AttributeError:
        raise RuntimeError('must be called from async context')

@enable_ki_protection
async def wait_writable(sock):
    try:
        return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_writable(sock)
    except AttributeError:
        raise RuntimeError('must be called from async context')

@enable_ki_protection
def notify_closing(handle):
    try:
        return  GLOBAL_RUN_CONTEXT.runner.io_manager.notify_closing(handle)
    except AttributeError:
        raise RuntimeError('must be called from async context')

@enable_ki_protection
def register_with_iocp(handle):
    try:
        return  GLOBAL_RUN_CONTEXT.runner.io_manager.register_with_iocp(handle)
    except AttributeError:
        raise RuntimeError('must be called from async context')

@enable_ki_protection
async def wait_overlapped(handle, lpOverlapped):
    try:
        return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_overlapped(handle, lpOverlapped)
    except AttributeError:
        raise RuntimeError('must be called from async context')

@enable_ki_protection
async def write_overlapped(handle, data, file_offset=0):
    try:
        return await GLOBAL_RUN_CONTEXT.runner.io_manager.write_overlapped(handle, data, file_offset)
    except AttributeError:
        raise RuntimeError('must be called from async context')

@enable_ki_protection
async def readinto_overlapped(handle, buffer, file_offset=0):
    try:
        return await GLOBAL_RUN_CONTEXT.runner.io_manager.readinto_overlapped(handle, buffer, file_offset)
    except AttributeError:
        raise RuntimeError('must be called from async context')

@enable_ki_protection
def current_iocp():
    try:
        return  GLOBAL_RUN_CONTEXT.runner.io_manager.current_iocp()
    except AttributeError:
        raise RuntimeError('must be called from async context')

@enable_ki_protection
def monitor_completion_key():
    try:
        return  GLOBAL_RUN_CONTEXT.runner.io_manager.monitor_completion_key()
    except AttributeError:
        raise RuntimeError('must be called from async context')
