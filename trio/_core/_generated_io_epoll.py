# ***********************************************************
# ******* WARNING: AUTOGENERATED! ALL EDITS WILL BE LOST ******
# *************************************************************

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Awaitable, Callable, Iterator

from ._instrumentation import Instrument
from ._ki import LOCALS_KEY_KI_PROTECTION_ENABLED
from ._run import _NO_SEND, GLOBAL_RUN_CONTEXT

if TYPE_CHECKING:
    import select
    import sys
    from contextvars import Context
    from socket import socket

    from _contextlib import _GeneratorContextManager
    from _core import Abort, RaiseCancelT, RunStatistics, SystemClock, Task, TrioToken
    from outcome import Outcome

    from .. import _core
    from .._abc import Clock
    from ._unbounded_queue import UnboundedQueue

# fmt: off


async def wait_readable(fd: (int | socket)) ->None:
    locals()[LOCALS_KEY_KI_PROTECTION_ENABLED] = True
    try:
        return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)
    except AttributeError:
        raise RuntimeError("must be called from async context")


async def wait_writable(fd: (int | socket)) ->None:
    locals()[LOCALS_KEY_KI_PROTECTION_ENABLED] = True
    try:
        return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_writable(fd)
    except AttributeError:
        raise RuntimeError("must be called from async context")


def notify_closing(fd: (int | socket)) ->None:
    locals()[LOCALS_KEY_KI_PROTECTION_ENABLED] = True
    try:
        return GLOBAL_RUN_CONTEXT.runner.io_manager.notify_closing(fd)
    except AttributeError:
        raise RuntimeError("must be called from async context")


# fmt: on
