# ***********************************************************
# ******* WARNING: AUTOGENERATED! ALL EDITS WILL BE LOST ******
# *************************************************************
from ._run import GLOBAL_RUN_CONTEXT, _NO_SEND
from ._ki import enable_ki_protection



@enable_ki_protection
def current_kqueue():
    try:
        return  GLOBAL_RUN_CONTEXT.runner.io_manager.current_kqueue()
    except AttributeError:
        raise RuntimeError('must be called from async context')

@enable_ki_protection
def monitor_kevent(ident, filter):
    try:
        return  GLOBAL_RUN_CONTEXT.runner.io_manager.monitor_kevent(ident, filter)
    except AttributeError:
        raise RuntimeError('must be called from async context')

@enable_ki_protection
async def wait_kevent(ident, filter, abort_func):
    try:
        return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_kevent(ident, filter, abort_func)
    except AttributeError:
        raise RuntimeError('must be called from async context')

@enable_ki_protection
async def wait_readable(fd):
    try:
        return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_readable(fd)
    except AttributeError:
        raise RuntimeError('must be called from async context')

@enable_ki_protection
async def wait_writable(fd):
    try:
        return await GLOBAL_RUN_CONTEXT.runner.io_manager.wait_writable(fd)
    except AttributeError:
        raise RuntimeError('must be called from async context')

@enable_ki_protection
def notify_closing(fd):
    try:
        return  GLOBAL_RUN_CONTEXT.runner.io_manager.notify_closing(fd)
    except AttributeError:
        raise RuntimeError('must be called from async context')
