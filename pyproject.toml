[build-system]
requires = ["setuptools >= 64"]
build-backend = "setuptools.build_meta"

[project]
name = "trio"
description = "A friendly Python library for async concurrency and I/O"
authors = [{name = "Nathaniel J. Smith", email = "njs@pobox.com"}]
license = {text = "MIT OR Apache-2.0"}
keywords = [
    "async",
    "io",
    "networking",
    "trio",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: Trio",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: BSD",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Networking",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    # attrs 19.2.0 adds `eq` option to decorators
    # attrs 20.1.0 adds @frozen
    "attrs >= 20.1.0",
    "sortedcontainers",
    "idna",
    "outcome",
    "sniffio >= 1.3.0",
    # cffi 1.12 adds from_buffer(require_writable=True) and ffi.release()
    # cffi 1.14 fixes memory leak inside ffi.getwinerror()
    # cffi is required on Windows, except on PyPy where it is built-in
    "cffi>=1.14; os_name == 'nt' and implementation_name != 'pypy'",
    "exceptiongroup; python_version < '3.11'",
]
dynamic = ["version"]

[project.readme]
file = "LONG_DESCRIPTION.rst"
content-type = "text/x-rst"

[project.urls]
Homepage = "https://github.com/python-trio/trio"
Documentation = "https://trio.readthedocs.io/"
Changelog = "https://trio.readthedocs.io/en/latest/history.html"

[tool.setuptools]
# This means, just install *everything* you see under trio/, even if it
# doesn't look like a source file, so long as it appears in MANIFEST.in:
include-package-data = true

[tool.setuptools.dynamic]
version = {attr = "trio._version.__version__"}

[tool.black]
target-version = ['py38']
force-exclude = '''
(
  ^/docs/source/reference-.*
  | ^/docs/source/tutorial
)
'''

[tool.codespell]
ignore-words-list = 'astroid,crasher,asend'

[tool.ruff]
respect-gitignore = true
fix = true

allowed-confusables = ["â€“"]

# The directories to consider when resolving first vs. third-party imports.
# Does not control what files to include/exclude!
src = ["src/trio", "notes-to-self"]

select = [
  "RUF",  # Ruff-specific rules
  "F",  # pyflakes
  "E",  # Error
  "W",  # Warning
  "I",  # isort
  "UP",  # pyupgrade
  "B",  # flake8-bugbear
  "YTT",  # flake8-2020
  "ASYNC",  # flake8-async
  "PYI",  # flake8-pyi
  "SIM",  # flake8-simplify
  "TCH",  # flake8-type-checking
  "PT",  # flake8-pytest-style
]
extend-ignore = [
    'F403',  # undefined-local-with-import-star
    'F405',  # undefined-local-with-import-star-usage
    'E402',  # module-import-not-at-top-of-file (usually OS-specific)
    'E501',  # line-too-long
    'SIM117',  # multiple-with-statements (messes up lots of context-based stuff and looks bad)
]

include = ["*.py", "*.pyi", "**/pyproject.toml"]

extend-exclude = [
  "docs/source/reference-*",
  "docs/source/tutorial/*",
]

[tool.ruff.per-file-ignores]
'src/trio/__init__.py' = ['F401']
'src/trio/_core/__init__.py' = ['F401']
'src/trio/_core/_tests/test_multierror_scripts/*' = ['F401']
'src/trio/abc.py' = ['F401']
'src/trio/lowlevel.py' = ['F401']
'src/trio/socket.py' = ['F401']
'src/trio/testing/__init__.py' = ['F401']

[tool.ruff.isort]
combine-as-imports = true

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false

[tool.mypy]
python_version = "3.8"

# Be flexible about dependencies that don't have stubs yet (like pytest)
ignore_missing_imports = true

# Be strict about use of Mypy
local_partial_types = true
warn_unused_ignores = true
warn_unused_configs = true
warn_redundant_casts = true
warn_return_any = true

# Avoid subtle backsliding
disallow_any_decorated = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
check_untyped_defs = true

[tool.pyright]
pythonVersion = "3.8"
reportUnnecessaryTypeIgnoreComment = true
typeCheckingMode = "strict"

[tool.pytest.ini_options]
addopts = ["--strict-markers", "--strict-config", "-p trio._tests.pytest_plugin"]
faulthandler_timeout = 60
filterwarnings = [
  "error",
  # https://gitter.im/python-trio/general?at=63bb8d0740557a3d5c688d67
  'ignore:You are using cryptography on a 32-bit Python on a 64-bit Windows Operating System. Cryptography will be significantly faster if you switch to using a 64-bit Python.:UserWarning',
  # https://github.com/berkerpeksag/astor/issues/217
  'ignore:ast.Num is deprecated:DeprecationWarning:astor',
]
junit_family = "xunit2"
markers = ["redistributors_should_skip: tests that should be skipped by downstream redistributors"]
xfail_strict = true

[tool.towncrier]
directory = "newsfragments"
filename = "docs/source/history.rst"
issue_format = "`#{issue} <https://github.com/python-trio/trio/issues/{issue}>`__"
# Usage:
# - PRs should drop a file like "issuenumber.feature" in newsfragments
# (or "bugfix", "doc", "removal", "misc"; misc gets no text, we can
# customize this)
# - At release time after bumping version number, run: towncrier
# (or towncrier --draft)
package = "trio"
package_dir = "src"
underlines = ["-", "~", "^"]

[[tool.towncrier.type]]
directory = "headline"
name = "Headline features"
showcontent = true

[[tool.towncrier.type]]
directory = "breaking"
name = "Breaking changes"
showcontent = true

[[tool.towncrier.type]]
directory = "feature"
name = "Features"
showcontent = true

[[tool.towncrier.type]]
directory = "bugfix"
name = "Bugfixes"
showcontent = true

[[tool.towncrier.type]]
directory = "doc"
name = "Improved documentation"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecated"
name = "Deprecations and removals"
showcontent = true

[[tool.towncrier.type]]
directory = "removal"
name = "Removals without deprecations"
showcontent = true

[[tool.towncrier.type]]
directory = "misc"
name = "Miscellaneous internal changes"
showcontent = true

[tool.coverage.run]
branch = true
source_pkgs = ["trio"]
omit = [
    # These are run in subprocesses, but still don't work. We follow
    # coverage's documentation to no avail.
    "*/trio/_core/_tests/test_multierror_scripts/*",
    # Omit the generated files in trio/_core starting with _generated_
    "*/trio/_core/_generated_*",
    # Type tests aren't intended to be run, just passed to type checkers.
    "*/type_tests/*",
]
# The test suite spawns subprocesses to test some stuff, so make sure
# this doesn't corrupt the coverage files
parallel = true

[tool.coverage.report]
precision = 1
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "abc.abstractmethod",
    "if TYPE_CHECKING.*:",
    "if _t.TYPE_CHECKING:",
    "if t.TYPE_CHECKING:",
    "@overload",
    'class .*\bProtocol\b.*\):',
    "raise NotImplementedError",
]
partial_branches = [
    "pragma: no branch",
    "if not TYPE_CHECKING:",
    "if not _t.TYPE_CHECKING:",
    "if not t.TYPE_CHECKING:",
    "if .* or not TYPE_CHECKING:",
    "if .* or not _t.TYPE_CHECKING:",
    "if .* or not t.TYPE_CHECKING:",
]
